{"version":3,"sources":["components/TimeLeft.tsx","App.tsx","shared/helpers.ts","serviceWorker.ts","index.tsx"],"names":["TimeLeft","onTimeUp","useState","counter","setCounter","useEffect","timer","setInterval","clearInterval","className","data","App","props","state","activeItems","Object","assign","x","y","cherry","bell","pear","bar","banana","players","name","points","lamas","maxLamas","color","currentPlayerIndex","bind","this","start","setState","map","player","index","key","num","size","toString","length","Math","pow","floor","substring","values","item","Array","i","index2","icon","colSpan","j","data-y-friendly","style","role","aria-label","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a26c225d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport interface ITimeLeftProps {\n    onTimeUp: () => void;\n}\n\nexport const TimeLeft: React.FC<ITimeLeftProps> = ({ onTimeUp }) => {\n    const [counter, setCounter] = useState(10);\n\n    // Third Attempts\n    useEffect(() => {\n        const timer = counter > 0 && setInterval(() => {\n            setCounter(counter - 1);\n            if (counter === 1 && onTimeUp) {\n                onTimeUp();\n            }\n        }, 1000);\n        return () => clearInterval(timer as NodeJS.Timeout);\n    }, [counter]);\n\n    return (\n        <div className=\"TimeLeft-count\">\n            <div className=\"TimeLeft-count-inner\">{counter}</div>\n        </div>\n    );\n};","import React, { Fragment } from \"react\";\n\nimport { IItem, IPlayer } from \"./shared/types\";\nimport { pad } from \"./shared/helpers\";\nimport { TimeLeft } from \"./components/TimeLeft\";\n\nconst debug = false;\n\nconst data = {\n    items: {\n        \"7\": {\n            \"name\": \"7\",\n            \"icon\": \"üèÜ\",\n            \"points\": 150\n        },\n        \"bar\": {\n            \"name\": \"bar\",\n            \"icon\": \"üí∏\",\n            \"points\": 100\n        },\n        \"cherry\": {\n            \"name\": \"cherry\",\n            \"icon\": \"üçí\",\n            \"points\": 70\n        },\n        \"pear\": {\n            \"name\": \"pear\",\n            \"icon\": \"üçê\",\n            \"points\": 40\n        },\n        \"plum\": {\n            \"name\": \"plum\",\n            \"icon\": \"üçá\",\n            \"points\": 30\n        },\n        \"banana\": {\n            \"name\": \"banana\",\n            \"icon\": \"üçå\",\n            \"points\": 20\n        },\n        \"bell\": {\n            \"name\": \"bell\",\n            \"icon\": \"üîî\",\n            \"points\": 10\n        }\n    } as { [key: string]: IItem }\n};\n\nconst maxLamas = 10;\n\n\nexport interface IAppProps { }\nexport interface IAppState {\n    activeItems: IItem[];\n    players: IPlayer[];\n    currentPlayerIndex: 0 | 1;\n}\n\nexport class App extends React.Component<IAppProps, IAppState> {\n    state = {\n        activeItems: [\n            Object.assign({ x: 1, y: 0 }, data.items.cherry),\n            Object.assign({ x: 1, y: 1 }, data.items.bell),\n            Object.assign({ x: 1, y: 2 }, data.items.pear),\n            Object.assign({ x: 2, y: 2 }, data.items.pear),\n            Object.assign({ x: 4, y: 2 }, data.items.bar),\n            Object.assign({ x: 0, y: 3 }, data.items.pear),\n            Object.assign({ x: 1, y: 3 }, data.items.cherry),\n            Object.assign({ x: 2, y: 3 }, data.items.bell),\n            Object.assign({ x: 4, y: 3 }, data.items.bell),\n            Object.assign({ x: 0, y: 4 }, data.items.banana),\n            Object.assign({ x: 1, y: 4 }, data.items.bell),\n            Object.assign({ x: 2, y: 4 }, data.items.pear),\n            Object.assign({ x: 3, y: 4 }, data.items.banana),\n            Object.assign({ x: 4, y: 4 }, data.items.bell),\n        ],\n        players: [\n            {\n                name: \"Cassidi\",\n                points: 0,\n                lamas: maxLamas / 2,\n                color: \"red\"\n            },\n            {\n                name: \"Butch\",\n                points: 0,\n                lamas: maxLamas / 2,\n                color: \"blue\"\n            }\n        ] as IPlayer[],\n\n        currentPlayerIndex: 0 as 0 | 1\n    };\n\n    constructor(props: IAppProps) {\n        super(props);\n        this.onTimeUp = this.onTimeUp.bind(this);\n    }\n\n    componentDidMount() {\n        this.start();\n    }\n\n    start() {\n    }\n\n    onTimeUp() {\n        this.setState({ currentPlayerIndex: this.state.currentPlayerIndex === 0 ? 1 : 0 });\n    }\n\n    render() {\n        return (\n            <div className={`App ${debug ? \"debug\" : \"\"}`}>\n\n\n                <div className=\"Stats m-1 mb-3\">\n                    {this.state.players.map((player: IPlayer, index: number) =>\n                        <div\n                            key={index}\n                            className={`Stats-player Stats-player-${player.color} ${(this.state.currentPlayerIndex === index) ? \"active\" : \"\"}`}\n                        >\n                            <div className=\"Stats-player-name\">{player.name}</div>\n                            <div className=\"Stats-player-points\">{pad(player.points, 4)}</div>\n                        </div>\n                    )}\n                </div>\n\n                <div className=\"App-row\">\n                    <div className=\"App-side-col\">\n                        <table className=\"App-table mx-2\">\n                            <tbody>\n                                {Object.values(data.items).map((item: IItem, index: number) =>\n                                    <tr key={index}>\n                                        {[...Array(3)].map((i: any, index2: number) =>\n                                            <td key={index2}>{item.icon}</td>\n                                        )}\n                                        <td>{item.points}</td>\n                                    </tr>\n                                )}\n\n                                <tr>\n                                    <td colSpan={3}>4 of a kind</td>\n                                    <td>&times;2</td>\n                                </tr>\n\n                                <tr>\n                                    <td colSpan={3}>5 of a kind</td>\n                                    <td>&times;3</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n\n                    <main className=\"App-main-col\">\n                        <div className=\"Grid mb-3\">\n                            {[...Array(5)].map((i: any, x: number) =>\n                                [...Array(5)].map((j: any, y: number) =>\n                                    <div\n                                        key={`${x}-${y}`}\n                                        className={`Grid-item Grid-item-${x}-${y} Grid-x-${x} Grid-y-${y}`} data-y-friendly={y + 1}\n                                        style={debug ? { boxShadow: \"inset 0 0 2px\" } : {}}\n                                    >\n                                        {debug && <span className=\"text-muted position-absolute\">x{x} y{y}</span>}\n                                    </div>\n                                )\n                            )}\n\n                            {this.state.activeItems.map((item: IItem, index: number) =>\n                                <div key={index} className={`Item Grid-item Grid-item-${item.x}-${item.y}`}>\n                                    {item.icon}\n                                </div>\n                            )}\n                        </div>\n\n                        <div className=\"TimeLeft mb-3\">\n                            <div className=\"TimeLeft-arrow TimeLeft-arrow-red\">\n                                {this.state.currentPlayerIndex === 0 &&\n                                    <span>‚¨Ö</span>\n                                }\n                            </div>\n\n                            {this.state.currentPlayerIndex === 0 ?\n                                <Fragment>\n                                    <TimeLeft onTimeUp={this.onTimeUp} />\n                                </Fragment>\n                                :\n                                <TimeLeft onTimeUp={this.onTimeUp} />\n                            }\n\n                            <div className=\"TimeLeft-arrow TimeLeft-arrow-blue\">\n                                {this.state.currentPlayerIndex === 1 &&\n                                    <span className=\"mirror\">‚¨Ö</span>\n                                }\n                            </div>\n                        </div>\n                    </main>\n\n                    <div className=\"App-side-col\" />\n                </div>\n\n\n                <div className=\"Lamas\">\n                    {this.state.players.map((player: IPlayer, index: number) =>\n                        <div key={index} className={`Lamas-player Lamas-player-${player.color}`}>\n                            {[...Array(player.lamas)].map((i: any, index: number) =>\n                                <span key={index}\n                                    className={`Lamas-llama ${player.color === \"red\" ? \"mirror\" : \"\"}`}\n                                    role=\"img\" aria-label=\"Llama\">ü¶ô</span>\n                            )}\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}","export function pad(num: number, size: number): string {\n    if (num.toString().length >= size) return num.toString();\n    return (Math.pow(10, size) + Math.floor(num)).toString().substring(1);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won\"t work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let\"s check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It\"s the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can\"t reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.scss\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}