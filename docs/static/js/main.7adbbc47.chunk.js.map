{"version":3,"sources":["components/TimeLeft.tsx","components/GridOverlay.tsx","shared/constants.ts","App.tsx","shared/helpers.ts","serviceWorker.ts","index.tsx"],"names":["TimeLeft","onTimeUp","useState","counter","setCounter","useEffect","timer","setInterval","clearInterval","className","GridOverlay","onHover","onMouseEnter","event","target","currentTarget","coordinates","x","dataset","parseInt","y","Array","map","i","key","j","data-y-friendly","style","process","data-x","data-y","data","items","App","props","state","activeItems","Object","assign","cherry","bell","pear","bar","banana","rows","columns","players","name","points","lamas","maxLamas","color","nextItems","plum","currentPlayerIndex","currentItem","bind","makeMove","this","start","new","setState","getNextItem","length","item","direction","forEach","index","itemIndex","newItem","JSON","parse","stringify","keepSliding","reverse","column","console","log","row","push","nextItem","player","num","size","toString","Math","pow","floor","substring","values","index2","icon","colSpan","onClick","role","aria-label","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7adbbc47.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport interface ITimeLeftProps {\n    onTimeUp: () => void;\n}\n\nexport const TimeLeft: React.FC<ITimeLeftProps> = ({ onTimeUp }) => {\n    const [counter, setCounter] = useState(10);\n\n    // Third Attempts\n    useEffect(() => {\n        const timer = counter > 0 && setInterval(() => {\n            setCounter(counter - 1);\n            if (counter === 1 && onTimeUp) {\n                onTimeUp();\n            }\n        }, 1000);\n        return () => clearInterval(timer as NodeJS.Timeout);\n    }, [counter, onTimeUp]);\n\n    return (\n        <div className=\"TimeLeft-count\">\n            <div className=\"TimeLeft-count-inner\">{counter}</div>\n        </div>\n    );\n};","import React, { Fragment, MouseEvent } from \"react\";\nimport { DEBUG } from \"../shared/constants\";\n\nexport interface IGridOverlayProps {\n    onHover: (x: number, y: number) => void;\n}\n\nexport const GridOverlay: React.FC<IGridOverlayProps> = ({ onHover }) => {\n    const onMouseEnter = (event: MouseEvent<HTMLDivElement>) => {\n        const target = event.currentTarget;\n\n        const coordinates = {\n            x: target.dataset.x ? parseInt(target.dataset.x) : 0,\n            y: target.dataset.y ? parseInt(target.dataset.y) : 0\n        }\n\n        onHover(coordinates.x, coordinates.y);\n    };\n\n    return (\n        <Fragment>\n            {[...Array(5)].map((i: any, x: number) =>\n                <Fragment key={x}>\n                    {[...Array(5)].map((j: any, y: number) =>\n                        <div\n                            key={`${x}-${y}`}\n                            className={`Grid-item Grid-coordinate Grid-item-${x}-${y} Grid-x-${x} Grid-y-${y}`}\n                            data-y-friendly={y + 1}\n                            style={DEBUG ? { boxShadow: \"inset 0 0 2px\" } : {}}\n                        >\n                            {DEBUG && <span className=\"text-muted position-absolute\">x{x} y{y}</span>}\n                        </div>\n                    )}\n\n                    <div\n                        className={`Grid-item Grid-hoverArea Grid-item-${x}--1 Grid-x-${x} Grid-y--1`}\n                        data-x={x}\n                        data-y={-1}\n                        onMouseEnter={onMouseEnter}\n                    />\n\n                    <div\n                        className={`Grid-item Grid-hoverArea Grid-item--1-${x} Grid-x--1 Grid-y-${x}`}\n                        data-x={-1}\n                        data-y={x}\n                        onMouseEnter={onMouseEnter}\n                    />\n                    <div\n                        className={`Grid-item Grid-hoverArea Grid-item-5-${x} Grid-x-5 Grid-y-${x}`}\n                        data-x={5}\n                        data-y={x}\n                        onMouseEnter={onMouseEnter}\n                    />\n                </Fragment>\n            )}\n        </Fragment>\n    );\n};","export const DEBUG: boolean = process.env.NODE_ENV === \"development\";\n// export const DEBUG: boolean = false;","import React, { Fragment } from \"react\";\n\nimport { IItem, IPlayer, IItemCoordinated, IRow, ColumnArray, IColumn } from \"./shared/types\";\nimport { pad } from \"./shared/helpers\";\nimport { TimeLeft } from \"./components/TimeLeft\";\nimport { DEBUG } from \"./shared/constants\";\nimport { GridOverlay } from \"./components/GridOverlay\";\n\nconst data = {\n    items: {\n        \"7\": {\n            \"name\": \"7\",\n            \"icon\": \"🏆\",\n            \"points\": 150\n        },\n        \"bar\": {\n            \"name\": \"bar\",\n            \"icon\": \"💸\",\n            \"points\": 100\n        },\n        \"cherry\": {\n            \"name\": \"cherry\",\n            \"icon\": \"🍒\",\n            \"points\": 70\n        },\n        \"pear\": {\n            \"name\": \"pear\",\n            \"icon\": \"🍐\",\n            \"points\": 40\n        },\n        \"plum\": {\n            \"name\": \"plum\",\n            \"icon\": \"🍇\",\n            \"points\": 30\n        },\n        \"banana\": {\n            \"name\": \"banana\",\n            \"icon\": \"🍌\",\n            \"points\": 20\n        },\n        \"bell\": {\n            \"name\": \"bell\",\n            \"icon\": \"🔔\",\n            \"points\": 10\n        }\n    } as { [key: string]: IItem }\n};\n\nconst maxLamas = 10;\n\n\nexport interface IAppProps { }\nexport interface IAppState {\n    activeItems: IItem[];\n    rows: IRow[];\n    players: IPlayer[];\n    nextItems: IItem[];\n    currentPlayerIndex: 0 | 1;\n    currentItem: IItem | null;\n}\n\nexport class App extends React.Component<IAppProps, IAppState> {\n    state = {\n        activeItems: [\n            Object.assign({ x: 1, y: 0 }, data.items.cherry),\n            Object.assign({ x: 1, y: 1 }, data.items.bell),\n            Object.assign({ x: 1, y: 2 }, data.items.pear),\n            Object.assign({ x: 2, y: 2 }, data.items.pear),\n            Object.assign({ x: 4, y: 2 }, data.items.bar),\n            Object.assign({ x: 0, y: 3 }, data.items.pear),\n            Object.assign({ x: 1, y: 3 }, data.items.cherry),\n            Object.assign({ x: 2, y: 3 }, data.items.bell),\n            Object.assign({ x: 4, y: 3 }, data.items.bell),\n            Object.assign({ x: 0, y: 4 }, data.items.banana),\n            Object.assign({ x: 1, y: 4 }, data.items.bell),\n            Object.assign({ x: 2, y: 4 }, data.items.pear),\n            Object.assign({ x: 3, y: 4 }, data.items.banana),\n            Object.assign({ x: 4, y: 4 }, data.items.bell),\n        ],\n        rows: [\n            { columns: [null, data.items.cherry, null, null, null] as ColumnArray },\n            { columns: [null, data.items.bell, null, null, null] as ColumnArray },\n            { columns: [null, data.items.pear, data.items.pear, null, data.items.bar] as ColumnArray },\n            { columns: [data.items.pear, data.items.cherry, data.items.bell, null, data.items.bell] as ColumnArray },\n            { columns: [data.items.banana, data.items.bell, data.items.pear, data.items.banana, data.items.bell] as ColumnArray },\n        ],\n        players: [\n            {\n                name: \"Cassidi\",\n                points: 0,\n                lamas: maxLamas / 2,\n                color: \"red\"\n            },\n            {\n                name: \"Butch\",\n                points: 0,\n                lamas: maxLamas / 2,\n                color: \"blue\"\n            }\n        ] as IPlayer[],\n        nextItems: [\n            data.items.bar,\n            data.items.plum\n        ] as IItem[],\n\n        currentPlayerIndex: 0 as 0 | 1,\n        currentItem: Object.assign({ x: 5, y: 3 }, data.items.banana)\n    };\n\n    constructor(props: IAppProps) {\n        super(props);\n        this.onTimeUp = this.onTimeUp.bind(this);\n        this.makeMove = this.makeMove.bind(this);\n    }\n\n    componentDidMount() {\n        this.start();\n    }\n\n    getNextItem(x: number = 5, y: number = 3) {\n        return Object.assign({ x: x, y: y, new: true }, this.state.nextItems[0]);\n    }\n\n    start() {\n        this.setState({\n            currentItem: this.getNextItem()\n        });\n    }\n\n    onTimeUp() {\n        this.setState({ currentPlayerIndex: this.state.currentPlayerIndex === 0 ? 1 : 0 });\n        // this.makeMove();\n    }\n\n    getItemByCoordinates(x: number, y: number, items: IItem[] = this.state.activeItems): IItem | null {\n        let i = 0;\n        for (i; i < items.length; i++) {\n            const item = items[i];\n            if (item.x === x && item.y === y) {\n                return item;\n            }\n        }\n        return null;\n    }\n\n    makeMove() {\n        const { currentItem, activeItems } = this.state;\n\n        const direction: \"left\" | \"right\" | \"top\" = (currentItem.x === -1) ? \"left\" : (currentItem.x === 5) ? \"right\" : \"top\";\n\n        // turn activeItems to IRow[]\n        let rows: IRow[] = new Array<IRow>(5);\n\n        activeItems.forEach((item: IItemCoordinated, index: number) => {\n            if (!rows[item.y]) rows[item.y] = { columns: [null, null, null, null] as unknown as ColumnArray };\n            rows[item.y].columns[item.x] = Object.assign({ itemIndex: index }, item);\n        });\n\n        let newItem = JSON.parse(JSON.stringify(currentItem));\n\n        if (direction === \"left\" || direction === \"right\") {\n            let keepSliding = true;\n\n            const line = direction === \"right\" ? rows[currentItem.y].columns.reverse() : rows[currentItem.y].columns;\n\n            line.forEach((column: IColumn | null, index: number) => {\n                if (keepSliding && column) {\n                    keepSliding = (rows[currentItem.y].columns[index + 1] !== null);\n\n                    if (direction === \"left\") {\n                        activeItems[column.itemIndex].x++;\n                    }\n                    else if (direction === \"right\") {\n                        activeItems[column.itemIndex].x--;\n                    }\n                }\n\n                if (!column) keepSliding = false;\n            });\n\n            if (direction === \"left\") {\n                newItem.x = 0;\n            }\n            if (direction === \"right\") {\n                newItem.x = 4;\n            }\n        }\n\n        if (direction === \"top\") {\n\n            console.log(rows);\n\n            newItem.y = 0;\n\n            rows.forEach((row: IRow, y: number) => {\n                const column = row.columns[currentItem.x];\n                if (column === null) {\n                    newItem.y = y;\n                }\n            });\n        }\n\n        activeItems.push(newItem);\n\n        const nextItem = this.getNextItem(currentItem.x, currentItem.y);\n\n        this.setState({\n            currentItem: nextItem,\n            activeItems\n        });\n    }\n\n    render() {\n        const { currentItem } = this.state;\n\n        return (\n            <div className={`App ${DEBUG === true ? \"DEBUG\" : \"\"}`}>\n\n\n                <div className=\"Stats m-1 mb-3\">\n                    {this.state.players.map((player: IPlayer, index: number) =>\n                        <div\n                            key={index}\n                            className={`Stats-player Stats-player-${player.color} ${(this.state.currentPlayerIndex === index) ? \"active\" : \"\"}`}\n                        >\n                            <div className=\"Stats-player-name\">{player.name}</div>\n                            <div className=\"Stats-player-points\">{pad(player.points, 4)}</div>\n                        </div>\n                    )}\n                </div>\n\n                <div className=\"App-row\">\n                    <div className=\"App-side-col\">\n                        <table className=\"App-table mx-2\">\n                            <tbody>\n                                {Object.values(data.items).map((item: IItem, index: number) =>\n                                    <tr key={index}>\n                                        {[...Array(3)].map((i: any, index2: number) =>\n                                            <td key={index2}>{item.icon}</td>\n                                        )}\n                                        <td>{item.points}</td>\n                                    </tr>\n                                )}\n\n                                <tr>\n                                    <td colSpan={3}>4 of a kind</td>\n                                    <td>&times;2</td>\n                                </tr>\n\n                                <tr>\n                                    <td colSpan={3}>5 of a kind</td>\n                                    <td>&times;3</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n\n                    <main className=\"App-main-col\">\n                        <div\n                            className=\"Grid mt-5 mb-3\"\n                            onClick={this.makeMove}\n                        >\n                            {this.state.activeItems.map((item: IItem, index: number) =>\n                                <div key={index} className={`Item Grid-item Grid-item-${item.x}-${item.y} Grid-x-${item.x} Grid-y-${item.y} ${item.new === true ? \"new\" : \"\"}`}>\n                                    {item.icon}\n                                </div>\n                            )}\n\n                            {/* {this.state.rows.map((row: IRow, y: number) =>\n                                row.columns.map((item: IItem | null, x: number) =>\n                                    item &&\n                                    <div key={`${x}-${y}`} className={`Item Grid-item Grid-item-${x}-${y} ${item.new === true ? \"new\" : \"\"}`}>\n                                        {item.icon}\n                                    </div>\n                                )\n                            )} */}\n\n                            {currentItem &&\n                                <div\n                                    className={`Item Grid-currentItem Grid-item Grid-item-${currentItem.x}-${currentItem.y} Grid-x-${currentItem.x} Grid-y-${currentItem.y}`}\n                                >\n                                    {currentItem.icon}\n                                </div>\n                            }\n\n                            <GridOverlay\n                                onHover={(x: number, y: number) => {\n                                    let currentItem = this.state.currentItem;\n                                    if (currentItem) {\n                                        currentItem.x = x;\n                                        currentItem.y = y;\n                                        this.setState({ currentItem });\n                                    }\n                                }}\n                            />\n                        </div>\n\n                        <div className=\"TimeLeft mb-3\">\n                            <div className=\"TimeLeft-arrow TimeLeft-arrow-red\">\n                                {this.state.currentPlayerIndex === 0 &&\n                                    <span>⬅</span>\n                                }\n                            </div>\n\n                            {this.state.currentPlayerIndex === 0 ?\n                                <Fragment>\n                                    <TimeLeft onTimeUp={this.onTimeUp} />\n                                </Fragment>\n                                :\n                                <TimeLeft onTimeUp={this.onTimeUp} />\n                            }\n\n                            <div className=\"TimeLeft-arrow TimeLeft-arrow-blue\">\n                                {this.state.currentPlayerIndex === 1 &&\n                                    <span className=\"mirror\">⬅</span>\n                                }\n                            </div>\n                        </div>\n                    </main>\n\n                    <div className=\"App-side-col\">\n                        {this.state.nextItems.map((item: IItem, index: number) =>\n                            <div key={index} className={`Item`}>\n                                {item.icon}\n                            </div>\n                        )}\n                    </div>\n                </div>\n\n\n                <div className=\"Lamas\">\n                    {this.state.players.map((player: IPlayer, index: number) =>\n                        <div key={index} className={`Lamas-player Lamas-player-${player.color}`}>\n                            {[...Array(player.lamas)].map((i: any, index: number) =>\n                                <span key={index}\n                                    className={`Lamas-llama ${player.color === \"red\" ? \"mirror\" : \"\"}`}\n                                    role=\"img\" aria-label=\"Llama\">🦙</span>\n                            )}\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}","export function pad(num: number, size: number): string {\n    if (num.toString().length >= size) return num.toString();\n    return (Math.pow(10, size) + Math.floor(num)).toString().substring(1);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won\"t work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let\"s check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It\"s the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can\"t reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.scss\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}